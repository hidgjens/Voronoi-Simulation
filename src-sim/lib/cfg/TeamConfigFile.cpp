#include "TeamConfigFile.h"
#include <unordered_map>
#include <vector>
#include <fstream>
#include <sstream>
#include <iostream>

TeamConfigFile::TeamConfigFile()
    {} // default constructor

TeamConfigFile::TeamConfigFile(std::string filename_) 
    : configFileName(filename_) 
    { loadFile(); }

void TeamConfigFile::parseConfigFile(const std::unordered_map<std::string, std::string>& umap){
    // umap is the unordered map generated by the loadFile() function
    // going to check whether some required values are given in the file

    // FIELDS [default]
    // -> TeamName [filename]
    // -> PlayerCount [11]
    // -> SmartCount [1]
    // -> ATK_NormAI [RandomWalk]
    // -> ATK_SmartAI
    // -> DEF_NormAI [ATK_NormAI]
    // -> DEF_SmartAI [ATK_SmartAI]

    // fn to check if key is present in umap
    auto check_key = [umap](std::string key_) -> bool{
        // check if key is in map
        if (umap.find(key_) == umap.end())
            // if key isn't found, umap.find returns end
            return false;
        else
            // key is found
            return true;
    };

    // TeamName
    if (check_key("TeamName")) 
        teamName = umap.at("TeamName");
    else
        teamName = configFileName;

    // PlayerCount
    if (check_key("PlayerCount"))
        playerCount = std::stoi(umap.at("PlayerCount"));
    else
        playerCount = 11;

    // SmartCount
    if (check_key("SmartCount"))
        smartPlayerCount = std::stoi(umap.at("SmartCount"));
    else
        smartPlayerCount = 1;

    // ATK_NormAI
    if (check_key("ATK_NormAI")) 
        ATK_normalAI_raw = umap.at("ATK_NormAI");
    else
        ATK_normalAI_raw = "RandomWalk";

    // ATK_SmartAI
    if (check_key("ATK_SmartAI")) 
        ATK_smartAI_raw = umap.at("ATK_SmartAI");
    else
        // required value, throw error
        throw std::invalid_argument("ATK_SmartAI not provided in team config (" + configFileName + ")\n");
    
    // DEF_NormAI
    if (check_key("DEF_NormAI")) 
        DEF_normalAI_raw = umap.at("DEF_NormAI");
    else
        // use ATK 
        DEF_normalAI_raw = ATK_normalAI_raw;

    // DEF_SmartAI
    if (check_key("DEF_SmartAI")) 
        DEF_smartAI_raw = umap.at("DEF_SmartAI");
    else
        // use ATK
        DEF_smartAI_raw = ATK_smartAI_raw;
    

}

void TeamConfigFile::loadFile(){ loadFile(configFileName); } // use filename stored

void TeamConfigFile::loadFile(std::string filename_){
    // load a config file from 'teams/filename_.team' and store the data
    if (filename_ != configFileName) configFileName = filename_;
    // store data from file in unordered map, and then select the values later
    std::unordered_map<std::string, std::string> data_umap;

    // temp variables
    std::string line, field;

    // open file
    std::ifstream CONFIGFILE("configs/teams/" + configFileName + ".cfg");

    // iterate over lines of config file
    while(std::getline(CONFIGFILE, line)){
        // for each line, need to split the line at the colon to get the key and value
        // use a vector to store values temporarily
        std::vector<std::string> fields; // lines are Key:Value

        std::istringstream iss(line); // create a stringstream with that string and split by ":"

        // splits the line by ':' and iterates through each section of the line adding to vector. Should only be 2 values
        while(std::getline(iss, field, ':')){
            fields.push_back(field);
        }
        // add the loaded data to the umap
        data_umap.insert(std::make_pair(fields.at(0), fields.at(1)));
        
    }
    // close file
    CONFIGFILE.close();

    std::cout << filename_ + ":\n";
    for (auto x : data_umap) {
        std::cout << x.first << "\t" << x.second << "\n";
    }
    std::cout << "\n";

    // parse arguments
    parseConfigFile(data_umap);

}

void TeamConfigFile::setConfigFileName(std::string fn_) {configFileName = fn_; }
std::string TeamConfigFile::getConfigFileName() const { return configFileName; }

void TeamConfigFile::setTeamName(std::string tn_) {teamName = tn_; }
std::string TeamConfigFile::getTeamName() const { return teamName; }

void TeamConfigFile::setPlayerCount(int cnt_) { playerCount = cnt_; }
int TeamConfigFile::getPlayerCount() const { return playerCount; }

void TeamConfigFile::setSmartCount(int cnt_) { smartPlayerCount = cnt_; }
int TeamConfigFile::getSmartCount() const { return smartPlayerCount; }

void TeamConfigFile::setAtkNormAI(std::string ai_str) { ATK_normalAI_raw = ai_str; }
std::string TeamConfigFile::getAtkNormAI() const { return ATK_normalAI_raw; }

void TeamConfigFile::setAtkSmartAI(std::string ai_str) { ATK_smartAI_raw = ai_str; }
std::string TeamConfigFile::getAtkSmartAI() const { return ATK_smartAI_raw; }

void TeamConfigFile::setDefNormAI(std::string ai_str) { DEF_normalAI_raw = ai_str; }
std::string TeamConfigFile::getDefNormAI() const { return DEF_normalAI_raw; }

void TeamConfigFile::setDefSmartAI(std::string ai_str) { DEF_smartAI_raw = ai_str; }
std::string TeamConfigFile::getDefSmartAI() const { return DEF_smartAI_raw; }