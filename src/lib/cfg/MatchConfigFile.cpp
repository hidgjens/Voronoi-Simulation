#include "MatchConfigFile.h"

#include <unordered_map>
#include <vector>
#include <fstream>
#include <sstream>
#include <iostream>

MatchConfigFile::MatchConfigFile(){}
MatchConfigFile::MatchConfigFile(std::string fn_) : configFileName(fn_) { loadFile(); }

void MatchConfigFile::parseConfigFile(const std::unordered_map<std::string, std::string>& umap){
    // umap is the unordered map generated by the loadFile() function
    // going to check whether some required values are given in the file

    // fn to check if key is present in umap
    auto check_key = [umap](std::string key_) -> bool{
        // check if key is in map
        if (umap.find(key_) == umap.end())
            // if key isn't found, umap.find returns end
            return false;
        else
            // key is found
            return true;
    };

    // RunName
    if (check_key("SaveName"))
        save_filename = umap.at("SaveName");
    else
        save_filename = configFileName;

    // save type
    if (check_key("FullSave"))
        if (umap.at("FullSave") == "true")
            full_save = true;
        else if (umap.at("FullSave") == "false")
            full_save = false;
        else
            throw std::invalid_argument("Full save needs true or false, not " + umap.at("FullSave"));
    else
    {
        // nothing provided, assume not
        full_save = false;
    }
    
    // samples
    if (check_key("SamplesX"))
        sample_x = std::stoi(umap.at("SamplesX"));
    else
        sample_x = 105;

    if (check_key("SamplesY"))
        sample_y = std::stoi(umap.at("SamplesY"));
    else
        sample_y = 68;

    // PitchModel
    if (check_key("PitchModel"))
        pitchMdl = umap.at("PitchModel");
    else
        pitchMdl = "Uniform";

    // PitchModel details
    if (check_key("xmin"))
        x_min = std::stod(umap.at("xmin"));
    else
        x_min = 0.5;

    if (check_key("xmax"))
        x_max = std::stod(umap.at("xmax"));
    else
        x_max = 1.0;

    if (check_key("ymin"))
        y_min = std::stod(umap.at("ymin"));
    else
        y_min = 0.5;

    if (check_key("ymax"))
        y_max = std::stod(umap.at("ymax"));
    else
        y_max = 1.0;

    // NumberOfFrames
    if (check_key("NumberOfFrames"))
        numberOfFrames = std::stoi(umap.at("NumberOfFrames"));
    else
        numberOfFrames = 2000;

    // PitchX
    if (check_key("PitchX"))
        pitchX = std::stod(umap.at("PitchX"));
    else
        pitchX = 105.0;

    // PitchY
    if (check_key("PitchY"))
        pitchY = std::stod(umap.at("PitchY"));
    else
        pitchY = 68.0;

    // Possession_chance
    if (check_key("PossessionChance"))
        possession_chance = std::stod(umap.at("PossessionChance"));
    else
        possession_chance = 50;

    // Player radius
    if (check_key("PlayerRadius"))
        player_radius = std::stod(umap.at("PlayerRadius"));
    else
    {
        player_radius = 0.4;
    }

    // Player Scatter Amount
    if (check_key("CollisionScatter"))
        player_scatter_length = std::stod(umap.at("CollisionScatter"));
    else
    {
        player_scatter_length = 0.75;
    }
    
    

}


void MatchConfigFile::loadFile() { loadFile(configFileName); }

void MatchConfigFile::loadFile(std::string filename_){
    // load a config file from 'teams/filename_.team' and store the data
    if (filename_ != configFileName) configFileName = filename_;
    // store data from file in unordered map, and then select the values later
    std::unordered_map<std::string, std::string> data_umap;

    // temp variables
    std::string line, field;

    // open file
    std::ifstream CONFIGFILE("configs/matches/" + configFileName + ".cfg");

    // iterate over lines of config file
    while(std::getline(CONFIGFILE, line)){
        // for each line, need to split the line at the colon to get the key and value
        // use a vector to store values temporarily
        std::vector<std::string> fields; // lines are Key:Value

        std::istringstream iss(line); // create a stringstream with that string and split by ":"

        // splits the line by ':' and iterates through each section of the line adding to vector. Should only be 2 values
        while(std::getline(iss, field, '=')){
            fields.push_back(field);
        }
        // add the loaded data to the umap
        data_umap.insert(std::make_pair(fields.at(0), fields.at(1)));
        
    }
    // close file
    CONFIGFILE.close();

    std::cout << filename_ + ":\n";
    for (auto x : data_umap) {
        std::cout << x.first << "\t" << x.second << "\n";
    }
    std::cout << "\n";

    // parse arguments
    raw_parameters = data_umap;
    parseConfigFile(data_umap);
    

}

// accessors and mutators
void MatchConfigFile::setConfigFileName(std::string fn_){ configFileName = fn_; }
std::string MatchConfigFile::getConfigFileName() const { return configFileName; }
